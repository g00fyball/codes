A1>>>>>>>>>>>>> USING DFS <<<<<<<<<<<<<<

class Solution {
public:
    
    vector<int> v;
    
    bool helper(TreeNode* r,int l)
    {
        if(!r)
            return true;
        
        if(r->val%2==l%2)
            return false;
        
        v.resize(max((int)v.size(),l+1));
        
        if(v[l]!=0 && ((l%2 && v[l]<=r->val) || (!(l%2) && v[l]>=r->val)))
            return false;
    
        v[l]=r->val;
        
        return helper(r->left,l+1) && helper(r->right,l+1);
    }
    
    bool isEvenOddTree(TreeNode* root) {
        
        return helper(root,0);
        
    }
};






A2>>>>>>>>>>>> USING BFS <<<<<<<<<<<<<<<<

class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        
        int it=0;
        
        queue<TreeNode*> q;
        
        q.push(root);
        
        while(!q.empty())
        {
            int s=q.size();
            
            int p=-1;
            for(int i=0;i<s;i++)
            {
                TreeNode* t=q.front();
                q.pop();
                
                if(it==0 && (t->val)%2==0)
                    return false;
                
                if(it==1 && (t->val)%2==1)
                    return false;
                
                if(i==0)
                {
                    p=t->val;
                }
                else
                {
                    if(it==0)
                    {
                        if(t->val<=p)
                            return false;
                    }
                    
                    if(it==1)
                    {
                        if(t->val>=p)
                            return false;
                    }
                    
                    p=t->val;
                }
                
                if(t->left)
                    q.push(t->left);
                if(t->right)
                    q.push(t->right);
            }
            
            if(it==0)
                it=1;
            else
                it=0;
        }
        
        return true;
    }
};
